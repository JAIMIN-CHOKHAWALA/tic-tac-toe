{"version":3,"sources":["components/Cell.js","components/Board.js","components/ResultModal.js","utils/winnerCalculator.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","params","cellClasses","classNames","canHighlight","value","className","onClick","onclick","Board","props","cells","cellValues","map","item","i","winningCombination","indexOf","cellClicked","id","ResultModal","resultModalClasses","isGameOver","message","winner","onPlayAgain","winningMatrix","Game","useState","setCellValues","xTurn","setXTurn","setIsGameOver","numberOfTurnsLeft","setnumberOfTurnsLeft","setWinner","setWinningCombination","cellIndex","isCellEmpty","updatedCellValues","updateNumberOfTurnsLeft","calcResult","winningRanges","length","currentValue","firstOption","secondOption","hasResult","undefined","calculateWinner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86c975de.chunk.js","sourcesContent":["import React from 'react';\r\nimport  classNames from 'classnames';\r\nimport './Cell.css';\r\n\r\n\r\nexport const Cell = (params) => {\r\n    const cellClasses = classNames({\r\n        'cell': true,\r\n        'winner': params.canHighlight,\r\n    });\r\n    \r\n    const cellContentClasses = ({\r\n        'cell-content': true,\r\n        'populated': params.value\r\n    })\r\n    \r\n    return (\r\n        <button className={cellClasses} onClick={params.onclick}>\r\n            <span className=\"cell-content populated\">{params.value}</span>\r\n        </button>\r\n    );\r\n}\r\n\r\n// export default Cell;","import React from 'react';\r\nimport './Board.css';\r\nimport { Cell } from './Cell';\r\n\r\nexport const Board = (props) => {\r\n\r\n    const cells = props.cellValues.map(\r\n        (item, i) => {\r\n            const canHighlight = props.winningCombination &&\r\n                                 props.winningCombination.indexOf(i) >= 0;\r\n            \r\n            return (\r\n                <Cell\r\n                    key={i}\r\n                    value={item}\r\n                    canHighlight={canHighlight}\r\n                    onclick={() => props.cellClicked(i)}\r\n                />\r\n            )\r\n            \r\n        }\r\n    );\r\n    \r\n    return (\r\n        <div id=\"board\">\r\n            \r\n            {cells}\r\n        \r\n        </div>\r\n    );\r\n}\r\n\r\n// export default Board;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport './ResultModal.css';\r\n\r\nexport const ResultModal = (props) => {\r\n    const resultModalClasses = classNames({\r\n        'modal-open': props.isGameOver\r\n    });\r\n    \r\n    const message = props.winner ? `Winner is ${props.winner}.` : 'It is a tie.';\r\n    \r\n    return (\r\n        <div id=\"modal-overlay\" className={resultModalClasses}>\r\n           <div id=\"game-result-modal\">\r\n               <div id=\"result-container\">\r\n                   <div id=\"winner-container\">\r\n                       <span>{message}</span>\r\n                   </div>\r\n               </div>\r\n               <div id=\"new-game-container\">\r\n                   <button id=\"new-game-button\" onClick={props.onPlayAgain}>Start New Game</button>\r\n               </div>\r\n           </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// export default ResultModal;\r\n","const winningMatrix = {\r\n    0: [[1,2],[3,6],[4,8]],\r\n    1: [[0,2],[4,7]],\r\n    2: [[0,1],[5,8],[4,6]],\r\n    3: [[0,6],[4,5]],\r\n    4: [[2,6],[3,5],[1,7],[0,8]],\r\n    5: [[3,4],[2,8]],\r\n    6: [[7,8],[0,3],[2,4]],\r\n    7: [[6,8],[1,4]],\r\n    8: [[6,7],[2,5],[0,4]]\r\n};\r\n\r\nexport const calculateWinner = (cellValues, numberOfTurnsLeft, cellIndex) => {\r\n    const winningRanges = winningMatrix[cellIndex];\r\n    \r\n    for (let i = 0; i < winningRanges.length; ++i) {\r\n        const currentValue = cellValues[cellIndex];\r\n        const firstOption = cellValues[winningRanges[i][0]];\r\n        const secondOption = cellValues[winningRanges[i][1]];\r\n        \r\n        if (currentValue === firstOption && firstOption === secondOption) {\r\n            return {\r\n                hasResult: true,\r\n                winner: currentValue,\r\n                winningCombination: [cellIndex, winningRanges[i][0], winningRanges[i][1]]\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (numberOfTurnsLeft === 0) {\r\n        return {\r\n            hasResult: true,\r\n            winner: undefined,\r\n            winningCombination: []\r\n        }\r\n    }\r\n    \r\n    return {\r\n        hasResult: false,\r\n        winner: undefined,\r\n        winningCombination: []\r\n    };\r\n    \r\n    \r\n}","import React, { useState } from 'react';\r\nimport './Game.css';\r\nimport { Board } from './Board';\r\nimport { ResultModal } from './ResultModal';\r\n\r\n// core-game-functionality;\r\nimport { calculateWinner } from '../utils/winnerCalculator';\r\n\r\nconst Game = () => {\r\n    /* CREATING GAME-STORE or STATE */\r\n    const [cellValues, setCellValues] = useState(['', '', '', '', '', '', '', '', '']);\r\n    const [xTurn, setXTurn] = useState(true);\r\n    const [isGameOver, setIsGameOver] = useState(false);\r\n    const [numberOfTurnsLeft, setnumberOfTurnsLeft] = useState(9);\r\n    const [winner, setWinner] = useState();\r\n    const [winningCombination, setWinningCombination] = useState([]);\r\n    \r\n    const isCellEmpty = (cellIndex) => cellValues[cellIndex] === '';\r\n    \r\n    \r\n    const onCellClicked = (cellIndex) => {\r\n        if (isCellEmpty(cellIndex)) {\r\n            const updatedCellValues = [...cellValues];\r\n            updatedCellValues[cellIndex] = xTurn ? 'X' : 'O';\r\n            \r\n            // Calculate the result : setIsGameOver(true);\r\n            const updateNumberOfTurnsLeft = numberOfTurnsLeft - 1;\r\n            setnumberOfTurnsLeft(updateNumberOfTurnsLeft);\r\n            const calcResult = calculateWinner(updatedCellValues, updateNumberOfTurnsLeft, cellIndex);\r\n            \r\n            setCellValues(updatedCellValues);\r\n            setXTurn(!xTurn);\r\n            setIsGameOver(calcResult.hasResult);\r\n            setWinner(calcResult.winner);\r\n            setWinningCombination(calcResult.winningCombination);\r\n        }\r\n    }\r\n    \r\n    const playAgain = () => {\r\n        setCellValues(['', '', '', '', '', '', '', '', '']);\r\n        setXTurn(true);\r\n        setIsGameOver(false);\r\n        setnumberOfTurnsLeft(9);\r\n        setWinner(undefined);\r\n        setWinningCombination([]);\r\n    }\r\n\r\n    return (\r\n      <>\r\n      <div id=\"game\">\r\n        <h1>Tic Tac Toe</h1>\r\n        \r\n        <Board\r\n            cellValues={cellValues}\r\n            winningCombination={winningCombination}\r\n            cellClicked={onCellClicked}\r\n        />\r\n\r\n     </div>\r\n     \r\n     <ResultModal\r\n        isGameOver={isGameOver}\r\n        winner={winner}\r\n        onPlayAgain={playAgain}\r\n     />\r\n     \r\n     </>\r\n    );\r\n}\r\n\r\n\r\nexport default Game;\r\n","import './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n      \n      <Game />\n      \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}